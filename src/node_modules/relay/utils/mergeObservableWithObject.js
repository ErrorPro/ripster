import Rx from 'rx'

export default function mergeObservableWithObject(object$, object) {
  const keys = Object.keys(object)

  const observableKeys = keys
    .filter(key => object[key] instanceof Rx.Observable)

  const staticKeys = keys
    .filter(key => observableKeys.indexOf(key) < 0)

  if (object$) {
    const prev = object$.getValue()
    const next = staticKeys
      .reduce((acc, key) => (
        acc[key] = object[key],
        acc
      ), {})

    const equals = staticKeys
      .every(key => next[key] === prev[key])

    if (!equals) {
      object$.onNext({...prev, ...next})
    }
  } else {
    object$ = new Rx.BehaviorSubject(
      staticKeys
        .reduce((acc, key) => (
          acc[key] = object[key],
          acc
        ), {})
    )
  }

  const combinedObject$ = Rx.Observable.combineLatest(
    object$,
    ...observableKeys.map(key => object[key]),
    (object, ...array) => {
      if (!object) {
        return
      }

      return observableKeys
        .reduce((acc, key, index) => (
          acc[key] = array[index],
          acc
        ), object)
    }
  )

  return {object$, combinedObject$}
}
