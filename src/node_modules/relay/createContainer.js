import Rx from 'rx'
import React, {PropTypes} from 'react'

export default function createContainer(Component, {queries, mutations = {}}) {
  return class RelayContainer extends React.Component {
    static displayName = `Relay(${Component.displayName || Component.name || ''})`

    constructor(...args) {
      super(...args)

      this.state = {
        loaded: Object.keys(RelayContainer.getExecutableQueries()).length === 0,
        data: {},
        errors: {}
      }
    }

    static getQuery(key) {
      return queries[key]
    }

    static getExecutableQueries() {
      return Object.keys(queries)
        .reduce((acc, key) => {
          if (queries[key].isExecutable()) {
            acc[key] = queries[key]
          }

          return acc
        }, {})
    }

    static contextTypes = {
      relay: PropTypes.object.isRequired
    }

    async componentDidMount() { // eslint-disable-line babel/generator-star-spacing
      const queries = RelayContainer.getExecutableQueries()

      const {subscribtions, dataObservables} = (await* Object.keys(queries)
        .map(async key => {
          return {
            key,
            data: await this.context.relay.fetch(queries[key].toString())
          }
        }))
        .reduce(({dataObservables, subscribtions}, {key, data}) => {
          subscribtions.push(data)
          dataObservables.push(data.getObservable().map(data => ({key, data})))

          return {dataObservables, subscribtions}
        }, {dataObservables: [], subscribtions: []})

      this.subscribtions = subscribtions

      this.subscribtion = Rx.Observable.combineLatest(
        ...dataObservables,
        (...data) => data
          .reduce((acc, {key, data}) => (
            acc[key] = data[key],
            acc
          ), {})
      ).subscribe(data => {
        this.setState({loaded: true, data})
      })
    }

    componentWillUnmount() {
      this.subscribtions.forEach(s => s.unsubscribe())
      this.subscribtion.dispose()
    }

    render() {
      if (!this.state.loaded) {
        return null
      }

      const props = {
        ...this.props,
        ...this.state.data
      }

      const handlers = Object.keys(mutations)
        .reduce((acc, key) => (
          acc[key] = async args => {
            const mutation = mutations[key](args, props)

            await this.context.relay.update(mutation)

            const error = mutation.getError()

            if (error) {
              // TODO: handle delete errors
              this.setState({
                errors: {
                  ...this.state.errors,
                  [key]: error
                }
              })
            }
          },
          acc
        ), {})

      return (
        <Component
          {...props}
          {...handlers}
          errors={this.state.errors}
        />
      )
    }
  }
}
