import GraphQLQuery from './query/GraphQLQuery'
import QuerySubscribtion from './query/QuerySubscribtion'
import UpdateMutation from './mutation/UpdateMutation'
import DeleteMutation from './mutation/DeleteMutation'
import CreateMutation from './mutation/CreateMutation'
import traversal from './utils/traversal'
import mergeObservableWithObject from './utils/mergeObservableWithObject'
import createArrayObservable from './utils/createArrayObservable'

export default class Relay {
  constructor(url) {
    this._url = url
    this._knowledge = {}
    this._querySubscribtions = []
  }

  async fetch(query) { // eslint-disable-line babel/generator-star-spacing
    const response = await this._runQuery(query)

    const observable = this._handleQueryResponse(response)

    const subscribtion = new QuerySubscribtion(query, observable, () => {
      this._querySubscribtions = this._querySubscribtions
        .filter(s => s !== subscribtion)
    })

    this._querySubscribtions.push(subscribtion)

    return subscribtion
  }

  async update(mutation) { // eslint-disable-line babel/generator-star-spacing
    if (mutation instanceof UpdateMutation) {
      await this._handleUpdateMutation(mutation)
    } else if (mutation instanceof DeleteMutation) {
      await this._handleDeleteMutation(mutation)
    } else if (mutation instanceof CreateMutation) {
      await this._handleCreateMutation(mutation)
    } else {
      throw new Error()
    }

    if (!mutation.getError()) {
      await* this._querySubscribtions
        .filter(s => mutation.isAffected(s.getQuery()))
        .map(s => this._reloadSubscribtion(s))
    }

    return mutation
  }

  async _runQuery(body) { // eslint-disable-line babel/generator-star-spacing
    if (body instanceof GraphQLQuery) {
      body = body.toString()
    }

    const response = await fetch(this._url, {
      method: 'POST',
      headers: {
        'Content-Type': 'text/plain'
      },
      body
    })

    const json = await response.json()

    if (json.errors) {
      throw new Error(json.errors[0].message)
    }

    return json.data
  }

  _handleQueryResponse(data) {
    const observerTree = traversal(data, obj => {
      if (Array.isArray(obj)) {
        return createArrayObservable(obj)

      } else if (obj.id) {
        const {object$, combinedObject$} = mergeObservableWithObject(this._knowledge[obj.id], obj)

        this._knowledge[obj.id] = object$

        return combinedObject$

      } else {
        return mergeObservableWithObject(undefined, obj).combinedObject$
      }
    })

    return observerTree
  }

  async _handleUpdateMutation(mutation) { // eslint-disable-line babel/generator-star-spacing
    const optimisticReferences = mutation.getOptimisticReferences()
    const previous = []

    for (const obj of optimisticReferences) {
      if (this._knowledge[obj.id]) {
        previous.push(this._knowledge[obj.id].getValue())
        mergeObservableWithObject(this._knowledge[obj.id], obj)
      }
    }

    try {
      const response = await this._runQuery(mutation.getQuery())

      mutation.setResponse(response)
    } catch (error) {
      for (const obj of previous) {
        this._knowledge[obj.id].onNext(obj)
      }

      mutation.setError(error)

      return
    }

    const references = mutation.getReferences()

    for (const obj of references) {
      const {object$} = mergeObservableWithObject(this._knowledge[obj.id], obj)

      this._knowledge[obj.id] = object$
    }
  }

  async _handleDeleteMutation(mutation) { // eslint-disable-line babel/generator-star-spacing
    const optimisticReferences = mutation.getOptimisticReferences()
    const previous = []

    for (const id of optimisticReferences) {
      if (this._knowledge[id]) {
        previous.push(this._knowledge[id].getValue())
        this._knowledge[id].onNext()
      }
    }

    try {
      const response = await this._runQuery(mutation.getQuery())

      mutation.setResponse(response)
    } catch (error) {
      for (const obj of previous) {
        this._knowledge[obj.id].onNext(obj)
      }

      mutation.setError(error)

      return
    }

    const references = mutation.getReferences()

    for (const id of references) {
      if (this._knowledge[id]) {
        this._knowledge[id].onCompleted()
      }
    }
  }

  async _handleCreateMutation(mutation) { // eslint-disable-line babel/generator-star-spacing
    try {
      const response = await this._runQuery(mutation.getQuery())

      mutation.setResponse(response)
    } catch (error) {
      mutation.setError(error)
      return
    }

    const references = mutation.getReferences()

    for (const obj of references) {
      const {object$} = mergeObservableWithObject(this._knowledge[obj.id], obj)

      this._knowledge[obj.id] = object$
    }
  }

  async _reloadSubscribtion(s) { // eslint-disable-line babel/generator-star-spacing
    const response = await this._runQuery(s.getQuery())
    const observable = this._handleQueryResponse(response)

    s.setObservable(observable)
  }
}
